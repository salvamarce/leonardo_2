<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from iris_base.xacro                | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="iris">
  <!---->
  <link name="base_link">
    <inertial>
      <mass value="1.5"/>
      <!-- [kg] -->
      <origin xyz="0 0 0"/>
      <inertia ixx="0.029125" ixy="0.0" ixz="0.0" iyy="0.029125" iyz="0.0" izz="0.055225"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://leonardo_world/iris_urdf/iris.dae" scale="1 1 1"/>
        <!-- <box size="${body_width} ${body_width} ${body_height}"/> -->
        <!-- [m] [m] [m] -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://leonardo_world/iris_urdf/iris.dae" scale="1 1 1"/>
      </geometry>
    </collision>
  </link>
  <!-- attach multirotor_base_plugin to the base_link -->
  <gazebo>
    <plugin filename="libgazebo_multirotor_base_plugin.so" name="rosbag">
      <robotNamespace></robotNamespace>
      <linkName>base_link</linkName>
      <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
    </plugin>
  </gazebo>
  <gazebo reference="base_link">
    <material>Gazebo/DarkGrey</material>
    <collision name="base_link_inertia_collision">
      <surface>
        <contact>
          <ode>
            <min_depth>0.001</min_depth>
            <max_vel>0.0</max_vel>
          </ode>
        </contact>
        <friction>
          <ode/>
        </friction>
      </surface>
    </collision>
  </gazebo>
  <link name="/camera_raw_link">
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
    </collision>
    <visual>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <material name="red"/>
    </visual>
    <inertial>
      <mass value="1e-5"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
    </inertial>
  </link>
  <joint name="/camera_raw_joint" type="fixed">
    <origin rpy="0.0 1.57 0.0" xyz="0.0 0 -0.04"/>
    <parent link="base_link"/>
    <child link="/camera_raw_link"/>
  </joint>
  <gazebo reference="/camera_raw_link">
    <sensor name="_camera_raw" type="camera">
      <update_rate>30</update_rate>
      <camera name="head">
        <horizontal_fov>1.4</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>B8G8R8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
                 That pixel's noise value is added to each of its color
                 channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.008</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="_camera_raw_controller">
        <robotNamespace></robotNamespace>
        <alwaysOn>true</alwaysOn>
        <updateRate>30</updateRate>
        <cameraName>camera_raw</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>/camera_raw_linkk</frameName>
        <hackBaseline>0.0</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- frames in the center of the camera -->
  <joint name="rgbd_camera_joint" type="fixed">
    <origin rpy="0.0 0.95 0.0" xyz="0.11 0.0 -0.02"/>
    <parent link="base_link"/>
    <child link="rgbd_camera"/>
  </joint>
  <link name="rgbd_camera">
    <!--
      <inertial>
        <origin xyz="-0.00936000000 -0.00003000000 -0.00273000000" rpy="0 0 0"/>
        <mass value="0.21970000000"/>
        <inertia ixx="0.00000429247" ixy="0.00000000000" ixz="0.00000002565"
                 iyy="0.00000008027" iyz="0.00000000000"
                 izz="0.00000427339"/>
      </inertial>
			-->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.01 0.08 0.01"/>
      </geometry>
      <material name="DarkGrey"/>
    </visual>
  </link>
  <joint name="rgbd_camera_optical_joint" type="fixed">
    <origin rpy="0.0 0 0.0" xyz="0 0 0"/>
    <parent link="rgbd_camera"/>
    <child link="rgbd_camera_optical_frame"/>
  </joint>
  <link name="rgbd_camera_optical_frame">
    <dummy_inertial/>
  </link>
  <!-- Depth sensor frames -->
  <joint name="rgbd_camera_depth_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.0 0.049 0.0"/>
    <parent link="rgbd_camera"/>
    <child link="rgbd_camera_depth_frame"/>
  </joint>
  <link name="rgbd_camera_depth_frame">
    <dummy_inertial/>
  </link>
  <joint name="rgbd_camera_depth_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <parent link="rgbd_camera_depth_frame"/>
    <child link="rgbd_camera_depth_optical_frame"/>
  </joint>
  <link name="rgbd_camera_depth_optical_frame">
    <dummy_inertial/>
  </link>
  <!-- RGB sensor frames -->
  <joint name="rgbd_camera_rgb_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.0 0.022 0.0"/>
    <parent link="rgbd_camera"/>
    <child link="rgbd_camera_rgb_frame"/>
  </joint>
  <link name="rgbd_camera_rgb_frame">
    <dummy_inertial/>
  </link>
  <joint name="rgbd_camera_rgb_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <parent link="rgbd_camera_rgb_frame"/>
    <child link="rgbd_camera_rgb_optical_frame"/>
  </joint>
  <link name="rgbd_camera_rgb_optical_frame">
    <dummy_inertial/>
  </link>
  <gazebo reference="rgbd_camera">
    <!-- Depth (IR) -->
    <sensor name="rgbd_camera_frame_sensor" type="depth">
      <always_on>true</always_on>
      <update_rate>6.0</update_rate>
      <camera>
        <horizontal_fov>1.74532925199</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>1360</width>
          <height>768</height>
        </image>
        <clip>
          <near>0.2</near>
          <far>6.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="rgbd_camera_frame_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>5.0</updateRate>
        <cameraName>rgbd_camera</cameraName>
        <imageTopicName>ir/image_raw</imageTopicName>
        <cameraInfoTopicName>ir/camera_info</cameraInfoTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <frameName>rgbd_camera_optical_frame</frameName>
        <pointCloudCutoff>0.05</pointCloudCutoff>
        <pointCloudCutoffMax>5</pointCloudCutoffMax>
        <rangeMax>0.5</rangeMax>
        <!-- Distortion parameters not supported in gazebo 1.9.* plugins -->
        <!--distortionK1>0.00000001</distortionK1>
          <distortionK2>0.00000001</distortionK2>
          <distortionK3>0.00000001</distortionK3>
          <distortionT1>0.00000001</distortionT1>
          <distortionT2>0.00000001</distortionT2-->
      </plugin>
    </sensor>
    <!-- RGB -->
    <sensor name="rgbd_camera_frame_sensor" type="depth">
      <always_on>true</always_on>
      <update_rate>6.0</update_rate>
      <camera>
        <horizontal_fov>1.74532925199</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>1360</width>
          <height>768</height>
        </image>
        <clip>
          <near>0.2</near>
          <far>6.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="rgbd_camera_frame_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>6.0</updateRate>
        <cameraName>rgbd_camera</cameraName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <pointCloudTopicName>rgb/points</pointCloudTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
        <frameName>rgbd_camera_optical_frame</frameName>
        <pointCloudCutoff>0.05</pointCloudCutoff>
        <pointCloudCutoffMax>5</pointCloudCutoffMax>
        <rangeMax>2.5</rangeMax>
      </plugin>
    </sensor>
  </gazebo>
  <!--

  <xacro:vertical_rotor
    robot_namespace="${namespace}"
    suffix="front_right"
    direction="ccw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="0"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    mesh="iris_prop"
    mesh_scale="${mesh_scale_prop}"
    color="Blue">
    <origin xyz="${arm_length_front_x} -${arm_length_front_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor
    robot_namespace="${namespace}"
    suffix="back_left"
    direction="ccw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="1"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    mesh="iris_prop"
    mesh_scale="${mesh_scale_prop}"
    color="DarkGrey">
    <origin xyz="-${arm_length_back_x} ${arm_length_back_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor robot_namespace="${namespace}"
    suffix="front_left"
    direction="cw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="2"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    mesh="iris_prop"
    mesh_scale="${mesh_scale_prop}"
    color="Blue">
    <origin xyz="${arm_length_front_x} ${arm_length_front_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor robot_namespace="${namespace}"
    suffix="back_right"
    direction="cw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="3"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    mesh="iris_prop"
    mesh_scale="${mesh_scale_prop}"
    color="DarkGrey">
    <origin xyz="-${arm_length_back_x} -${arm_length_back_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>
	-->
</robot>
